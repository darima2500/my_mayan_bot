import os
import random
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request
from datetime import date, datetime
from waves_schedule import waves_schedule
from language_store import get_language, set_language
from dotenv import load_dotenv
from tones.tones_data import tones_data
from archetypes.archetypes_data import archetypes_data
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from reminders import save_reminders, load_reminders



def get_current_kin():
    # –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ 2 –º–∞—è 2025 = –ö–∏–Ω 255 (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∞)
    start_date = date(2025, 5, 2)
    today = date.today()
    delta_days = (today - start_date).days
    return (255 + delta_days) % 260 or 260


    
def find_wave_by_kin(kin_number):
    for wave in waves_schedule:
        if wave["start_kin"] <= kin_number <= wave["end_kin"]:
            return wave
    return None
    
def get_current_tone(kin_number):
    return (kin_number - 1) % 13 + 1

    

load_dotenv()  # <-- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = "https://web-production-93b7.up.railway.app"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

def build_main_menu(user_id, lang):
    reminders = load_reminders()
    is_enabled = reminders.get(str(user_id), False)

    if lang == "ru":
        notify_label = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª" if is_enabled else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª"
        return [
            "üìÖ –¢–µ–∫—É—â–∞—è –í–æ–ª–Ω–∞",
            "üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–∏–Ω",
            "üåå –ü–æ–ª—É—á–∏—Ç—å –ö–æ—Å–º–æ–≥—Ä–∞–º–º—É",
            "üåû –ó–∞–∫–∞–∑–∞—Ç—å –°–æ–ª—è—Ä",
            "üé® –ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã",
            "üìñ –û –ø—Ä–æ–µ–∫—Ç–µ",
            "‚ú® –û –ö–∞–ª–µ–Ω–¥–∞—Ä–µ",
            notify_label
        ]
    else:
        notify_label = "üîî Notifications: On" if is_enabled else "üîï Notifications: Off"
        return [
            "üìÖ Today's Wave",
            "üî¢ Calculate Kin",
            "üåå Order Cosmogram",
            "üåû Order Solar Return",
            "üé® Wave Mandala",
            "üìñ About the Project",
            "‚ú® About the Calendar",
            notify_label
        ]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    lang_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    lang_keyboard.add(
        KeyboardButton("üá¨üáß English"),
        KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    )

    welcome_text = (
        "üåø Welcome to the flow of Mayan time.\n\n"
        "üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–∞–π—è–Ω—Å–∫–∏—Ö —ç–Ω–µ—Ä–≥–∏–π! \n\n"
        "üëá Choose your language / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:"
    )

    with open('welcome_banner.png', 'rb') as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=welcome_text,
            parse_mode="Markdown",
            reply_markup=lang_keyboard
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text in ["üá¨üáß English", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"])
def set_user_language(message):
    lang = "en" if message.text == "üá¨üáß English" else "ru"
    set_language(message.chat.id, lang)

    # –°—Ç—Ä–æ–∏–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for button in build_main_menu(message.chat.id, lang):
        markup.add(KeyboardButton(button))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = (
        "Welcome! Choose an option below:" if lang == "en"
        else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )

    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ["üìÖ Today's Wave", "üìÖ –¢–µ–∫—É—â–∞—è –í–æ–ª–Ω–∞"])
def send_today_wave(message):
    lang = get_language(message.chat.id)
    kin_number = get_current_kin()
    tone_number = get_current_tone(kin_number)

    tone_data = tones_data[tone_number][lang]
    tone_name = tone_data["name"]
    tone_keywords = tone_data["keywords"]
    tone_description = tone_data["description"]

    tone_block = (
        f"üåü *{tone_name}* (Tone {tone_number})\n"
        f"_{tone_keywords}_\n\n"
        f"{tone_description}"
    )

    found_wave = find_wave_by_kin(kin_number)
    if found_wave:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ª–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        wave_index = waves_schedule.index(found_wave)
        wave_number = wave_index + 1
        wave_image_path = f"wave_images/wave_{wave_number}.png"

        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–æ–ª–Ω—ã
        print("–ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ:", wave_image_path)
        try:
            with open(wave_image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
        except FileNotFoundError:
            bot.send_message(message.chat.id, "üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–π –≤–æ–ª–Ω—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ª–Ω—ã
        try:
            wave_message = found_wave["get_message_func"](lang)
        except Exception as e:
            wave_message = None
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –≤–æ–ª–Ω—ã:\n{e}")
            return

        if wave_message:
            full_message = f"{tone_block}\n\n{wave_message}"
            bot.send_message(message.chat.id, full_message, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è Wave message is empty.")
    else:
        bot.send_message(message.chat.id, "‚ùå Wave not found.")


@bot.message_handler(func=lambda m: "About the Project" in m.text or "–û –ø—Ä–æ–µ–∫—Ç–µ" in m.text) 
def about_project(message):
    lang = get_language(message.chat.id)
    text = (
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∏—Ç—É–∞–ª –≤—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–±—è —á–µ—Ä–µ–∑ –∂–∏–≤–æ–π —Ä–∏—Ç–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–ß–µ—Ä–µ–∑ —Å–∏–Ω—Ç–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –¥—Ä–µ–≤–Ω–∏—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤, "
        "—ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è —Å–æ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–≤–æ–∏ –∑–µ–º–Ω—ã–µ –∏ –≤—ã—Å—à–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤ —Ü–µ–ª–æ—Å—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏—é –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ª–Ω ‚Äî —ç—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω—ã —Ö—É–¥–æ–∂–Ω–∏—Ü—ã –î–∞—Ä–∏–º—ã –¶—ã—Ä–µ–º–ø–∏–ª–æ–≤–æ–π, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –∏ –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ —ç–Ω–µ—Ä–≥–∏—é –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã.\n"
        "üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [theartofreconnection.info](https://theartofreconnection.info)\n"
        "üì© –°–≤—è–∑—å: @darimacello"
    ) if lang == "ru" else (
        "This bot is a space for inner alignment ‚Äî a daily ritual of remembering yourself through the living rhythm of time.\n\n"
        "Through the synthesis of modern technologies and ancient cosmic cycles, "
        "this project invites you to attune your earthly and higher aspects into one harmonious flow.\n\n"
        "All wave visuals are original paintings by the artist Darima Tcyrempilova, created by hand to embody each phase‚Äôs energy.\n"
        "üåê More: [theartofreconnection.info](https://theartofreconnection.info)\n"
        "üì© Contact: @darimacello"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

    

@bot.message_handler(func=lambda message: message.text in ["‚ú® –û –ö–∞–ª–µ–Ω–¥–∞—Ä–µ", "‚ú® About the Calendar"])
def about_calendar(message):
    lang = get_language(message.chat.id)

    # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ (–µ—Å–ª–∏ –æ–Ω–∞ –ª–µ–∂–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞)
    image_path = "images/tzolkin_visual.png"

    text = (
        "–¶–æ–ª—å–∫–∏–Ω ‚Äî —ç—Ç–æ —Å–≤—è—â–µ–Ω–Ω—ã–π 260-–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –º–∞–π—è–Ω—Å–∫–æ–π –∫–æ—Å–º–æ–ª–æ–≥–∏–∏. –û–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–æ–∑–Ω–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–û–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç 20 –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –∏ 13 —Ç–æ–Ω–æ–≤ (–¥–Ω–µ–π), —Å–æ–∑–¥–∞–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è. "
        "–í –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –ø–æ –¥–æ–∫—Ç–æ—Ä—É –ö–∞—Ä–ª—É –ö–∞–ª—å–º–∞–Ω—É, –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —ç–≤–æ–ª—é—Ü–∏–∏ —Å–æ–∑–Ω–∞–Ω–∏—è. –≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏. \n\n"
        "–°–æ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—è—Å—å —Å —ç—Ç–∏–º–∏ —ç–Ω–µ—Ä–≥–∏—è–º–∏, —Ç—ã –º–æ–∂–µ—à—å –≥–ª—É–±–∂–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–≤–æ—é –ø—Ä–∏—Ä–æ–¥—É –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –∂–∏–∑–Ω–∏ —Å –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç—å—é, —Å–≤–æ–±–æ–¥–æ–π –∏ –≥–ª—É–±–∏–Ω–æ–π."
    ) if lang == "ru" else (
        "Tzolkin is a sacred 260-day cycle rooted in Mayan cosmology. It maps the invisible architecture of consciousness and time.\n\n"
        "It combines 20 archetypes (universal forces of life) and 13 tones (phases of evolution), forming a unique energetic signature for each day. "
        "Our project follows the approach of Dr. Carl Calleman, focusing on the evolution of consciousness. "
        "Each day carries a distinct pulse in the dance of creation, helping you tune into the deeper currents shaping your experience."
    )

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open(image_path, "rb") as photo:
        bot.send_photo(message.chat.id, photo)

    # –ü–æ—Ç–æ–º ‚Äî —Ç–µ–∫—Å—Ç
    bot.send_message(message.chat.id, text)




# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Telegram
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid request', 400

# --- –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ Railway (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∂–∏–≤–æ–π)
@app.route("/")
def index():
    return "Hello, this is Mayan Bot!"


# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–∏–Ω"
@bot.message_handler(func=lambda message: message.text in ["üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–∏–Ω", "üî¢ Calculate Kin"])
def ask_birthdate(message):
    lang = get_language(message.chat.id)
    user_states[message.chat.id] = "awaiting_birthdate"
    text = (
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.06.1991):"
        if lang == "ru"
        else "Enter your birth date in format DD.MM.YYYY (e.g. 21.06.1991):"
    )
    bot.send_message(message.chat.id, text)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "awaiting_birthdate")
def handle_birthdate(message):
    lang = get_language(message.chat.id)
    try:
        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        start_date = date(2025, 5, 8)
        delta = (birth_date - start_date).days
        kin_number = (delta % 260) + 1
        tone_number = (kin_number - 1) % 13 + 1

        wave = find_wave_by_kin(kin_number)
        wave_name = wave["name"] if wave else "Unknown"

        archetype_number = ((kin_number - 1) % 20) + 1
        archetype_entry = archetypes_data.get(archetype_number, {})
        archetype = archetype_entry.get(lang) or archetype_entry.get("ru") or {
            "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "keywords": [],
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        }

        if lang == "ru":
            response = (
                f"üî¢ *–ö–∏–Ω*: {kin_number}\n"
                f"üí† *–ê—Ä—Ö–µ—Ç–∏–ø*: *{archetype['name']}* ‚Äî _{', '.join(archetype['keywords'])}_\n\n"
                f"{archetype['description']}\n\n"
                f"üéµ *–¢–æ–Ω*: {tone_number}\n"
                f"üåä *–í–æ–ª–Ω–∞*: {wave_name}"
            )
        else:
            response = (
                f"üî¢ *Kin*: {kin_number}\n"
                f"üí† *Archetype*: *{archetype['name']}* ‚Äî _{', '.join(archetype['keywords'])}_\n\n"
                f"{archetype['description']}\n\n"
                f"üéµ *Tone*: {tone_number}\n"
                f"üåä *Wave*: {wave_name}"
            )

        bot.send_message(message.chat.id, response, parse_mode="Markdown")

    except Exception as e:
        error_text = (
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì"
            if lang == "ru"
            else "‚ùå Invalid date format. Please try again: DD.MM.YYYY"
        )
        bot.send_message(message.chat.id, error_text)

    finally:
        user_states.pop(message.chat.id, None)



        
@bot.message_handler(func=lambda m: m.text in [
    "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª", "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª",
    "üîî Notifications", "üîï Notifications", "üîî Notifications: On", "üîï Notifications: Off"
])
def toggle_reminder(message):
    user_id = str(message.chat.id)
    lang = get_language(message.chat.id)
    reminders = load_reminders()
    current = reminders.get(user_id, False)
    reminders[user_id] = not current
    save_reminders(reminders)

    is_now = reminders[user_id]

    text = (
        f"{'‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *–≤–∫–ª—é—á–µ–Ω–æ*.' if is_now else 'üö´ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *–æ—Ç–∫–ª—é—á–µ–Ω–æ*.'}\n\n"
        "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ –º–∞–π—è–Ω—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é."
    ) if lang == "ru" else (
        f"{'‚úÖ Morning reminder *enabled*.' if is_now else 'üö´ Morning reminder *disabled*.'}\n\n"
        "Each morning you'll receive the Mayan energy update for the day."
    )

    # –û–±–Ω–æ–≤–∏–º –º–µ–Ω—é
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for button in build_main_menu(message.chat.id, lang):
        markup.add(KeyboardButton(button))

    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=markup)



# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö "–ü–æ–ª—É—á–∏—Ç—å –ö–æ—Å–º–æ–≥—Ä–∞–º–º—É" ---
@bot.message_handler(func=lambda m: m.text in ["üåå –ü–æ–ª—É—á–∏—Ç—å –ö–æ—Å–º–æ–≥—Ä–∞–º–º—É", "üåå Order Cosmogram"])
def handle_cosmogram_simple(message):
    lang = get_language(message.chat.id)
    if lang == "ru":
        text = (
            "üåå *–õ–∏—á–Ω–∞—è –∫–æ—Å–º–æ–≥—Ä–∞–º–º–∞* ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –º–∞–π—è–Ω—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.\n"
            "–í –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã –ø–æ–ª—É—á–∏—à—å 5 –º–∞–Ω–¥–∞–ª –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–æ —ç–Ω–µ—Ä–≥–∏—è–º —Å–≤–æ–µ–π –∫–æ—Å–º–æ–≥—Ä–∞–º–º—ã.\n\n"
            "*–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:*\n"
            "‚Äî –ê—Ä—Ö–µ—Ç–∏–ø —Ç–≤–æ–µ–≥–æ –¥—É—Ö–∞ (–ö–∏–Ω —Ä–æ–∂–¥–µ–Ω–∏—è)\n"
            "‚Äî –°–ø–æ—Å–æ–± —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–¢–æ–Ω)\n"
            "‚Äî –í–æ–ª–Ω–∞ –∫–∞–∫ –ø—É—Ç—å –∏ —Ä–∏—Ç–º —Ç–≤–æ–µ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è\n"
            "‚Äî –ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è (—Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã)\n"
            "‚Äî –≠–Ω–µ—Ä–≥–∏—è –ø—Ä–æ—à–ª–æ–≥–æ –∏ –±—É–¥—É—â–µ–≥–æ (–¥–≤–µ –æ–ø–æ—Ä—ã –¥—É—à–∏)\n"
            "‚Äî –ú–∞–Ω–¥–∞–ª–∞ –¥–ª—è —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "‚ö™ *–§–æ—Ä–º–∞—Ç:* PDF-–¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –≤–∏–∑—É–∞–ª–æ–º\n\n"
            "üíå –ó–∞–∫–∞–∑–∞—Ç—å: [@darimacello](https://t.me/darimacello)"
        )
        bot.send_message(message.chat.id, text, parse_mode="Markdown")

    else:
        text = (
            "üåå *Personal Cosmogram* ‚Äî a full energetic reading based on your Mayan birth energies.\n\n"
            "*What‚Äôs inside:*\n"
            "‚Äî Archetype of your spirit (Birth Kin)\n"
            "‚Äî Mode of realization (Tone)\n"
            "‚Äî The wave as your soul‚Äôs rhythm and path\n"
            "‚Äî Masculine and feminine energies (your active and receptive sides)\n"
            "‚Äî Past and future energies (soul anchors)\n"
            "‚Äî A mandala for deep alignment\n\n"
            "‚ö™ *Format:* PDF with interpretation and visual\n\n"
            "üíå To order: [@darimacello](https://t.me/darimacello)"
        )
        bot.send_message(message.chat.id, text, parse_mode="Markdown")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö "–°–æ–ª—è—Ä" ---
@bot.message_handler(func=lambda m: m.text in ["üåû –ó–∞–∫–∞–∑–∞—Ç—å –°–æ–ª—è—Ä", "üåû Order Solar Return"])
def handle_solar_simple(message):
    lang = get_language(message.chat.id)
    if lang == "ru":
        text = (
            "üåû *–õ–∏—á–Ω—ã–π –°–æ–ª—è—Ä* ‚Äî —Ç–≤–æ—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –≥–æ–¥–∞ –ø–æ –º–∞–π—è–Ω—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é.\n\n"
            "*–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:*\n"
            "‚Äî –ì–ª–∞–≤–Ω—ã–π –ö–∏–Ω –≥–æ–¥–∞ (—Ç–µ–º–∞ —Ç–≤–æ–µ–≥–æ —Ü–∏–∫–ª–∞)\n"
            "‚Äî –í–æ–ª–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è\n"
            "‚Äî –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ª–Ω—ã –≥–æ–¥–∞ (–º–æ–º–µ–Ω—Ç—ã —Å–∏–ª—ã –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)\n"
            "‚Äî –ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –≥–æ–¥–∞ (—á—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å)\n"
            "‚Äî –≠–Ω–µ—Ä–≥–∏—è –≤—Ö–æ–¥–∞ –≤ –≥–æ–¥ –∏ —Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤–∞–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å\n"
            "‚Äî –ú–∞–Ω–¥–∞–ª—ã –≤ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "‚ö™ *–§–æ—Ä–º–∞—Ç:* PDF-–¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç—Ä–∞–∫—Ç–æ–≤–∫–æ–π –∏ –≤–∏–∑—É–∞–ª–æ–º\n\n"
            "üíå –ó–∞–∫–∞–∑–∞—Ç—å: [@darimacello](https://t.me/darimacello)"
        )
    else:
        text = (
            "üåû *Personal Solar Chart* ‚Äî your energetic map of the current year based on the Mayan calendar.\n\n"
            "*What‚Äôs inside:*\n"
            "‚Äî Your year's guiding Kin (theme of the cycle)\n"
            "‚Äî The wave it unfolds in\n"
            "‚Äî Sensitive waves of the year (moments of strength and transformation)\n"
            "‚Äî Masculine and feminine energies of the year (what to activate and receive)\n"
            "‚Äî The energy you enter the year with, and what to release\n"
            "‚Äî Mandalas as a gift for deep attunement\n\n"
            "‚ö™ *Format:* PDF with guidance and visuals\n\n"
            "üíå To order: [@darimacello](https://t.me/darimacello)"
        )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")



# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö "–ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã" ---
@bot.message_handler(func=lambda m: m.text in ["üé® –ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã", "üé® Wave Mandala"])
def handle_wave_mandala(message):
    lang = get_language(message.chat.id)
    if lang == "ru":
        text = (
            "üé® *–ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã*\n\n"
            "–ö–∞–∂–¥—ã–µ 13 –¥–Ω–µ–π —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—É—é –º–∞–Ω–¥–∞–ª—É –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏ —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —ç–Ω–µ—Ä–≥–∏—è–º–∏.\n\n"
            "–í–æ—Ç —Ç–µ–∫—É—â–∞—è –º–∞–Ω–¥–∞–ª–∞:"
        )
        caption = "üåÄ –¢–µ–∫—É—â–∞—è –º–∞–Ω–¥–∞–ª–∞. –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 13 –¥–Ω–µ–π."
    else:
        text = (
            "üé® *Wave Mandala*\n\n"
            "Every 13 days you can receive a new mandala to tune into the current wave's energy.\n\n"
            "Just print it and connect the dotes on the mandala. Here is the current one:"
        )
        caption = "üåÄ Current mandala. Updated every 13 days."

    bot.send_message(message.chat.id, text, parse_mode="Markdown")
    try:
        with open("wave_mandalas/mandala_current.jpg", "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=caption)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–∞–π–ª –º–∞–Ω–¥–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å mandala_current.jpg –≤ –ø–∞–ø–∫—É wave_mandalas/")
    
# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –í–•–û–î–Ø–©–ò–• –°–û–û–ë–©–ï–ù–ò–ô ---
@bot.message_handler(func=lambda message: True)
def log_all_messages(message):
    print("üì• –ü–æ–π–º–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", repr(message.text))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏ –∑–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}", allowed_updates=["message"])
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
