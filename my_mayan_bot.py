import os
import random
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request
from datetime import date, datetime
from waves_schedule import waves_schedule
from language_store import get_language, set_language
from dotenv import load_dotenv
from tones.tones_data import tones_data
from archetypes.archetypes_data import archetypes_data
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from reminders import save_reminders, load_reminders



def get_current_kin():
    # –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ 2 –º–∞—è 2025 = –ö–∏–Ω 255 (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∞)
    start_date = date(2025, 5, 2)
    today = date.today()
    delta_days = (today - start_date).days
    return (255 + delta_days) % 260 or 260


    
def find_wave_by_kin(kin_number):
    for wave in waves_schedule:
        if wave["start_kin"] <= kin_number <= wave["end_kin"]:
            return wave
    return None
    
def get_current_tone(kin_number):
    return (kin_number - 1) % 13 + 1

    

load_dotenv()  # <-- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = "https://web-production-93b7.up.railway.app"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

def build_main_menu(user_id, lang):
    reminders = load_reminders()
    is_enabled = reminders.get(str(user_id), False)

    if lang == "ru":
        notify_label = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª" if is_enabled else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª"
        return [
            "üìÖ –¢–µ–∫—É—â–∞—è –í–æ–ª–Ω–∞",
            "üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–∏–Ω",
            "üåå –ü–æ–ª—É—á–∏—Ç—å –ö–æ—Å–º–æ–≥—Ä–∞–º–º—É",
            "üåû –ó–∞–∫–∞–∑–∞—Ç—å –°–æ–ª—è—Ä",
            "üé® –ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã",
            "üìñ –û –ø—Ä–æ–µ–∫—Ç–µ",
            "‚ú® –û –ö–∞–ª–µ–Ω–¥–∞—Ä–µ",
            notify_label
        ]
    else:
        notify_label = "üîî Notifications: On" if is_enabled else "üîï Notifications: Off"
        return [
            "üìÖ Today's Wave",
            "üî¢ Calculate Kin",
            "üåå Order Cosmogram",
            "üåû Order Solar Return",
            "üé® Wave Mandala",
            "üìñ About the Project",
            "‚ú® About the Calendar",
            notify_label
        ]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    lang_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    lang_keyboard.add(
        KeyboardButton("üá¨üáß English"),
        KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    )

    welcome_text = (
        "üåø Welcome to the flow of Mayan time.\n\n"
        "üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–∞–π—è–Ω—Å–∫–∏—Ö —ç–Ω–µ—Ä–≥–∏–π! \n\n"
        "üëá Choose your language / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:"
    )

    with open('welcome_banner.png', 'rb') as photo:
        bot.send_photo(
            message.chat.id,
            photo,
            caption=welcome_text,
            parse_mode="Markdown",
            reply_markup=lang_keyboard
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text in ["üá¨üáß English", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"])
def set_user_language(message):
    lang = "en" if message.text == "üá¨üáß English" else "ru"
    set_language(message.chat.id, lang)

    # –°—Ç—Ä–æ–∏–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for button in build_main_menu(message.chat.id, lang):
        markup.add(KeyboardButton(button))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = (
        "Welcome! Choose an option below:" if lang == "en"
        else "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )

    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ["üìÖ Today's Wave", "üìÖ –¢–µ–∫—É—â–∞—è –í–æ–ª–Ω–∞"])
def send_today_wave(message):
    lang = get_language(message.chat.id)
    kin_number = get_current_kin()
    tone_number = get_current_tone(kin_number)

    tone_data = tones_data[tone_number][lang]
    tone_name = tone_data["name"]
    tone_keywords = tone_data["keywords"]
    tone_description = tone_data["description"]

    tone_block = (
        f"üåü *{tone_name}* (Tone {tone_number})\n"
        f"_{tone_keywords}_\n\n"
        f"{tone_description}"
    )

    found_wave = find_wave_by_kin(kin_number)
    if found_wave:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ª–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        wave_index = waves_schedule.index(found_wave)
        wave_number = wave_index + 1
        wave_image_path = f"wave_images/wave_{wave_number}.png"

        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–æ–ª–Ω—ã
        try:
            with open(wave_image_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
        except FileNotFoundError:
            bot.send_message(message.chat.id, "üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–π –≤–æ–ª–Ω—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ª–Ω—ã
        try:
            wave_message = found_wave["get_message_func"](lang)
        except Exception as e:
            wave_message = None
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –≤–æ–ª–Ω—ã:\n{e}")
            return

        if wave_message:
            full_message = f"{tone_block}\n\n{wave_message}"
            bot.send_message(message.chat.id, full_message, parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è Wave message is empty.")
    else:
        bot.send_message(message.chat.id, "‚ùå Wave not found.")


@bot.message_handler(commands=["id"])
def get_id(message):
    bot.send_message(message.chat.id, f"Your Telegram ID: {message.chat.id}")

@bot.message_handler(func=lambda message: message.text in ["üìñ –û –ø—Ä–æ–µ–∫—Ç–µ", "üìñ About the Project"])
def about_project(message):
    lang = get_language(message.chat.id)
    text = (
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∏—Ç—É–∞–ª –≤—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–±—è —á–µ—Ä–µ–∑ –∂–∏–≤–æ–π —Ä–∏—Ç–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–ß–µ—Ä–µ–∑ —Å–∏–Ω—Ç–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –¥—Ä–µ–≤–Ω–∏—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤, "
        "—ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è —Å–æ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–≤–æ–∏ –∑–µ–º–Ω—ã–µ –∏ –≤—ã—Å—à–∏–µ –∞—Å–ø–µ–∫—Ç—ã –≤ —Ü–µ–ª–æ—Å—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏—é –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –≤—Ä–µ–º–µ–Ω–∏."
    ) if lang == "ru" else (
        "This bot is a space for attuning to yourself through the living fabric of time.\n\n"
        "Through the synthesis of modern technologies and ancient cosmic cycles, "
        "this project builds a bridge between the eternal and the current, inviting you to attune your body, soul and a spirit into a wholeness once again."
    )
    bot.send_message(message.chat.id, text)

    

@bot.message_handler(func=lambda message: message.text in ["‚ú® –û –ö–∞–ª–µ–Ω–¥–∞—Ä–µ", "‚ú® About the Calendar"])
def about_calendar(message):
    lang = get_language(message.chat.id)

    # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ (–µ—Å–ª–∏ –æ–Ω–∞ –ª–µ–∂–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞)
    image_path = "images/tzolkin_visual.png"

    text = (
        "–¶–æ–ª—å–∫–∏–Ω ‚Äî —ç—Ç–æ —Å–≤—è—â–µ–Ω–Ω—ã–π 260-–¥–Ω–µ–≤–Ω—ã–π —Ü–∏–∫–ª, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –º–∞–π—è–Ω—Å–∫–æ–π –∫–æ—Å–º–æ–ª–æ–≥–∏–∏. –û–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–æ–∑–Ω–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–û–Ω –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç 20 –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –∏ 13 —Ç–æ–Ω–æ–≤ (–¥–Ω–µ–π), —Å–æ–∑–¥–∞–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è. "
        "–í –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –ø–æ –¥–æ–∫—Ç–æ—Ä—É –ö–∞—Ä–ª—É –ö–∞–ª—å–º–∞–Ω—É, –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —ç–≤–æ–ª—é—Ü–∏–∏ —Å–æ–∑–Ω–∞–Ω–∏—è. –≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏. \n\n"
        "–°–æ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—è—Å—å —Å —ç—Ç–∏–º–∏ —ç–Ω–µ—Ä–≥–∏—è–º–∏, —Ç—ã –º–æ–∂–µ—à—å –≥–ª—É–±–∂–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–≤–æ—é –ø—Ä–∏—Ä–æ–¥—É –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –∂–∏–∑–Ω–∏ —Å –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç—å—é, —Å–≤–æ–±–æ–¥–æ–π –∏ –≥–ª—É–±–∏–Ω–æ–π."
    ) if lang == "ru" else (
        "Tzolkin is a sacred 260-day cycle rooted in Mayan cosmology. It maps the invisible architecture of consciousness and time.\n\n"
        "It combines 20 archetypes (universal forces of life) and 13 tones (phases of evolution), forming a unique energetic signature for each day. "
        "Our project follows the approach of Dr. Carl Calleman, focusing on the evolution of consciousness. "
        "Each day carries a distinct pulse in the dance of creation, helping you tune into the deeper currents shaping your experience."
    )

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open(image_path, "rb") as photo:
        bot.send_photo(message.chat.id, photo)

    # –ü–æ—Ç–æ–º ‚Äî —Ç–µ–∫—Å—Ç
    bot.send_message(message.chat.id, text)

    
ALLOWED_TEXTS = [
    "/start",
    "üìÖ Today's Wave",
    "üìÖ –¢–µ–∫—É—â–∞—è –í–æ–ª–Ω–∞",
    "üî¢ Calculate Kin",  # –≤ en
    "üåå –ü–æ–ª—É—á–∏—Ç—å –ö–æ—Å–º–æ–≥—Ä–∞–º–º—É",
    "üåå Order Cosmogram",
    "üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–∏–Ω",  # –≤ ru
    "üåû Order Solar Return",
    "üåû –ó–∞–∫–∞–∑–∞—Ç—å –°–æ–ª—è—Ä",
    "üé® –ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã",
    "üé® Wave Mandala",
    "üìñ About the Project",
    "üìñ –û –ø—Ä–æ–µ–∫—Ç–µ",
    "‚ú® About the Calendar",
    "‚ú® –û –ö–∞–ª–µ–Ω–¥–∞—Ä–µ",
    "üá¨üáß English",
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
]

@bot.message_handler(func=lambda message: message.text in ALLOWED_TEXTS)
def handle_allowed_buttons(message):
    # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å
    pass

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Telegram
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid request', 400

# --- –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ Railway (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∂–∏–≤–æ–π)
@app.route("/")
def index():
    return "Hello, this is Mayan Bot!"


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–∏–Ω"
@bot.message_handler(func=lambda message: message.text in ["üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–∏–Ω", "üî¢ Calculate Kin"])
def ask_birthdate(message):
    lang = get_language(message.chat.id)
    user_states[message.chat.id] = "awaiting_birthdate"
    text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.06.1991):" if lang == "ru" else "Enter your birth date in format DD.MM.YYYY (e.g. 21.06.1991):"
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "awaiting_birthdate")
def handle_birthdate(message):
    lang = get_language(message.chat.id)
    try:
        print("üß™ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", repr(message.text))
        print("üìé –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", type(message.text))
        print("‚úÇÔ∏è –ü–æ—Å–ª–µ strip():", repr(message.text.strip()))

        birth_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        start_date = date(2025, 5, 8)
        delta = (birth_date - start_date).days
        kin_number = (delta % 260) + 1
        tone_number = (kin_number - 1) % 13 + 1

        wave = find_wave_by_kin(kin_number)
        wave_name = wave["name"] if wave else "Unknown"

        archetype_number = ((kin_number - 1) % 20) + 1
        archetype_entry = archetypes_data.get(archetype_number, {})
        print("üåê –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", lang)
        print("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –∞—Ä—Ö–µ—Ç–∏–ø–∞:", list(archetype_entry.keys()))
        
        archetype = archetype_entry.get(lang) or archetype_entry.get("ru") or {
            "name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "keywords": [],
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        }

        if lang == "ru":
            response = (
                f"üî¢ *–ö–∏–Ω*: {kin_number}\n"
                f"üí† *–ê—Ä—Ö–µ—Ç–∏–ø*: *{archetype['name']}* ‚Äî _{', '.join(archetype['keywords'])}_\n\n"
                f"{archetype['description']}\n\n"
                f"üéµ *–¢–æ–Ω*: {tone_number}\n"
                f"üåä *–í–æ–ª–Ω–∞*: {wave_name}"
            )
        else:
            response = (
                f"üî¢ *Kin*: {kin_number}\n"
                f"üí† *Archetype*: *{archetype['name']}* ‚Äî _{', '.join(archetype['keywords'])}_\n\n"
                f"{archetype['description']}\n\n"
                f"üéµ *Tone*: {tone_number}\n"
                f"üåä *Wave*: {wave_name}"
            )

        bot.send_message(message.chat.id, response, parse_mode="Markdown")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:", e)
        error_text = (
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì"
            if lang == "ru"
            else "Invalid date format. Please try again: DD.MM.YYYY"
        )
        bot.send_message(message.chat.id, error_text)

    finally:
        user_states.pop(message.chat.id, None)

        
@bot.message_handler(func=lambda m: m.text in [
    "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª", "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª",
    "üîî Notifications", "üîï Notifications", "üîî Notifications: On", "üîï Notifications: Off"
])
def toggle_reminder(message):
    user_id = str(message.chat.id)
    lang = get_language(message.chat.id)
    reminders = load_reminders()
    current = reminders.get(user_id, False)
    reminders[user_id] = not current
    save_reminders(reminders)

    is_now = reminders[user_id]

    text = (
        f"{'‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *–≤–∫–ª—é—á–µ–Ω–æ*.' if is_now else 'üö´ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *–æ—Ç–∫–ª—é—á–µ–Ω–æ*.'}\n\n"
        "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ –º–∞–π—è–Ω—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é."
    ) if lang == "ru" else (
        f"{'‚úÖ Morning reminder *enabled*.' if is_now else 'üö´ Morning reminder *disabled*.'}\n\n"
        "Each morning you'll receive the Mayan energy update for the day."
    )

    # –û–±–Ω–æ–≤–∏–º –º–µ–Ω—é
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for button in build_main_menu(message.chat.id, lang):
        markup.add(KeyboardButton(button))

    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=markup)



# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö "–ü–æ–ª—É—á–∏—Ç—å –ö–æ—Å–º–æ–≥—Ä–∞–º–º—É" ---
@bot.message_handler(func=lambda m: m.text in ["üåå –ü–æ–ª—É—á–∏—Ç—å –ö–æ—Å–º–æ–≥—Ä–∞–º–º—É", "üåå Order Cosmogram"])
def handle_cosmogram_simple(message):
    lang = get_language(message.chat.id)
    if lang == "ru":
        text = (
            "üåå *–õ–∏—á–Ω–∞—è –∫–æ—Å–º–æ–≥—Ä–∞–º–º–∞* ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–µ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –ø–æ –º–∞–π—è–Ω—Å–∫–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏ —Ç–≤–æ–∏—Ö –ª–∏—á–Ω—ã—Ö —ç–Ω–µ—Ä–≥–∏–π.\n"
            "–í –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã –ø–æ–ª—É—á–∏—à—å 5 –º–∞–Ω–¥–∞–ª –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–æ —ç–Ω–µ—Ä–≥–∏—è–º —Å–≤–æ–µ–π –∫–æ—Å–º–æ–≥—Ä–∞–º–º—ã.\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: *2200 —Ä*\n\n"
            "‚úâÔ∏è –ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é: @darimacello"
        )
    else:
        text = (
            "üåå *Personal Cosmogram* ‚Äî a full energetic reading based on your Mayan birth energies.\n"
            "Includes 5 mandalas for tuning in and drawing.\n\n"
            "üí∞ Price: *15 EUR*\n\n"
            "‚úâÔ∏è To order, message me directly: @darimacello"
        )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö "–°–æ–ª—è—Ä" ---
@bot.message_handler(func=lambda m: m.text in ["üåû –ó–∞–∫–∞–∑–∞—Ç—å –°–æ–ª—è—Ä", "üåû Order Solar Return"])
def handle_solar_simple(message):
    lang = get_language(message.chat.id)
    if lang == "ru":
        text = (
            "‚òÄÔ∏è *–õ–∏—á–Ω—ã–π —Å–æ–ª—è—Ä* ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥: –≥–ª–∞–≤–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã.\n"
            "–í –ø–æ–¥–∞—Ä–æ–∫ ‚Äî 5 –º–∞–Ω–¥–∞–ª –¥–ª—è —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —ç–Ω–µ—Ä–≥–∏—è–º–∏ –≥–æ–¥–∞.\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: *2200 —Ä*\n\n"
            "‚úâÔ∏è –ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ Telegram: @darimacello"
        )
    else:
        text = (
            "‚òÄÔ∏è *Solar Return Reading* ‚Äî personal themes and energies for your upcoming year.\n"
            "Includes 5 mandalas for yearly alignment.\n\n"
            "üí∞ Price: *15 EUR*\n\n"
            "‚úâÔ∏è To order, message me directly: @darimacello"
        )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö "–ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã" ---
@bot.message_handler(func=lambda m: m.text in ["üé® –ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã", "üé® Wave Mandala"])
def handle_wave_mandala(message):
    lang = get_language(message.chat.id)
    if lang == "ru":
        text = (
            "üé® *–ú–∞–Ω–¥–∞–ª–∞ –í–æ–ª–Ω—ã*\n\n"
            "–ö–∞–∂–¥—ã–µ 13 –¥–Ω–µ–π —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—É—é –º–∞–Ω–¥–∞–ª—É –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏ —Å–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —ç–Ω–µ—Ä–≥–∏—è–º–∏.\n\n"
            "–í–æ—Ç —Ç–µ–∫—É—â–∞—è –º–∞–Ω–¥–∞–ª–∞:"
        )
        caption = "üåÄ –¢–µ–∫—É—â–∞—è –º–∞–Ω–¥–∞–ª–∞. –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 13 –¥–Ω–µ–π."
    else:
        text = (
            "üé® *Wave Mandala*\n\n"
            "Every 13 days you can receive a new mandala to tune into the current wave's energy.\n\n"
            "Here is the current one:"
        )
        caption = "üåÄ Current mandala. Updated every 13 days."

    bot.send_message(message.chat.id, text, parse_mode="Markdown")
    try:
        with open("wave_mandalas/mandala_current.jpg", "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption=caption)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–∞–π–ª –º–∞–Ω–¥–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å mandala_current.jpg –≤ –ø–∞–ø–∫—É wave_mandalas/")
    
# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –í–•–û–î–Ø–©–ò–• –°–û–û–ë–©–ï–ù–ò–ô ---
@bot.message_handler(func=lambda message: True)
def log_all_messages(message):
    print("üì• –ü–æ–π–º–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", repr(message.text))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –∏ –∑–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}", allowed_updates=["message"])
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
